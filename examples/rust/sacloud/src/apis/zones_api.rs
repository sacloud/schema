/*
 * SAKURA Cloud APIs
 *
 * This is a definitions for SAKURA Cloud APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: sacloud.users@gmail.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `list_zones`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListZonesError {
    Status400(crate::models::ApiError),
    Status401(crate::models::ApiError),
    Status403(crate::models::ApiError),
    Status405(crate::models::ApiError),
    Status500(crate::models::ApiError),
    Status503(crate::models::ApiError),
    DefaultResponse(crate::models::ApiError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `show_zone_by_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ShowZoneByIdError {
    Status400(crate::models::ApiError),
    Status401(crate::models::ApiError),
    Status403(crate::models::ApiError),
    Status404(crate::models::ApiError),
    Status500(crate::models::ApiError),
    Status503(crate::models::ApiError),
    DefaultResponse(crate::models::ApiError),
    UnknownValue(serde_json::Value),
}

/// List all Zones
pub async fn list_zones(
    configuration: &configuration::Configuration,
    params: crate::models::ZoneFindRequest,
) -> Result<crate::models::ZoneMultiResponse, Error<ListZonesError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/zone?{params}", configuration.base_path, params = params);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListZonesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Info for a specific Zone
pub async fn show_zone_by_id(
    configuration: &configuration::Configuration,
    zone_id: crate::models::Id,
) -> Result<crate::models::ZoneSingleResponse, Error<ShowZoneByIdError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/zone/{zoneId}",
        configuration.base_path,
        zoneId = zone_id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ShowZoneByIdError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
